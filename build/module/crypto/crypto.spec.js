import test from 'ava';
import decrypt from './decrypt';
import digest from './digest';
import encrypt from './encrypt';
import exportKey from './exportKey';
import getKeyFromDerivedPassword from './getKeyFromDerivedPassword';
import { bufferToString, base64ToString, generateNonce, generateSalt, stringToBuffer, stringToBase64, bufferToBase64, base64ToBuffer, } from './utils';
if (!globalThis.crypto) {
    globalThis.crypto = require('isomorphic-webcrypto');
}
const PASSWORD = '$ome_sTr0ng-p4ssw0rd_1234';
test('password-based key with salt', async (t) => {
    const randomSalt = generateSalt();
    const passwordKey = await getKeyFromDerivedPassword(PASSWORD, randomSalt);
    t.truthy(passwordKey);
});
test('convert string to Uint8Array and back', (t) => {
    const str = '👨‍💻 Hello, World!';
    const ab = stringToBuffer(str);
    const andBackToString = bufferToString(ab);
    t.truthy(str === andBackToString);
});
test('convert uint8array to base64', (t) => {
    const from = generateSalt();
    const to = bufferToBase64(from);
    t.deepEqual(from.join(''), base64ToBuffer(to).join(''));
});
test('convert string to base64 and back', (t) => {
    const data = '💩 abc123';
    const encoded = stringToBase64(data);
    t.truthy(encoded);
    const decoded = base64ToString(encoded);
    t.deepEqual(decoded, '💩 abc123');
});
test('encrypt/descrypt message', async (t) => {
    const data = 'This is a message! 👈🏽';
    const password = PASSWORD;
    const salt = generateSalt();
    const nonce = generateNonce();
    // Encryption
    const passwordKey = await getKeyFromDerivedPassword(password, salt, true);
    const encryptedData = await encrypt(passwordKey, nonce, stringToBuffer(data));
    // JSON safe data
    const encryptedDataBase64 = bufferToBase64(encryptedData);
    const saltBase64 = bufferToBase64(salt);
    const nonceBase64 = bufferToBase64(nonce);
    // Decryption
    const salt2 = base64ToBuffer(saltBase64);
    const nonce2 = base64ToBuffer(nonceBase64);
    const encryptedData2 = base64ToBuffer(encryptedDataBase64);
    const passwordKey2 = await getKeyFromDerivedPassword(password, salt2, true);
    const decryptedData = await decrypt(passwordKey2, nonce2, encryptedData2);
    const data2 = bufferToString(decryptedData);
    t.is(data, data2);
});
test('encrypt/descrypt JSON data', async (t) => {
    const data = {
        some: 'data',
    };
    const randomSalt = generateSalt();
    const passwordKeyEncrypt = await getKeyFromDerivedPassword(PASSWORD, randomSalt);
    const json = JSON.stringify(data);
    const nonce = generateNonce();
    const encryptedBuffer = await encrypt(passwordKeyEncrypt, nonce, stringToBuffer(json));
    const passwordKeyFull = await getKeyFromDerivedPassword(PASSWORD, randomSalt, true);
    const decryptedData = await decrypt(passwordKeyFull, nonce, encryptedBuffer);
    const decryptedJson = bufferToString(decryptedData);
    t.deepEqual(data, JSON.parse(decryptedJson));
});
test('hash message', async (t) => {
    const message = 'This is a random message to be hashes';
    const hash = await digest(message);
    t.truthy(hash);
});
test('export key', async (t) => {
    const password = 'abc123';
    const salt = generateSalt();
    const passKey = await getKeyFromDerivedPassword(password, salt, false, 1, true);
    const extractedKey = await exportKey(passKey);
    t.truthy(typeof extractedKey === 'string');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL2NyeXB0by5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyx5QkFBeUIsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQ0wsY0FBYyxFQUNkLGNBQWMsRUFDZCxhQUFhLEVBQ2IsWUFBWSxFQUNaLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsR0FDZixNQUFNLFNBQVMsQ0FBQztBQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtJQUN0QixVQUFVLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3JEO0FBRUQsTUFBTSxRQUFRLEdBQUcsMkJBQTJCLENBQUM7QUFFN0MsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMvQyxNQUFNLFVBQVUsR0FBRyxZQUFZLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFdBQVcsR0FBRyxNQUFNLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUUxRSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDbEQsTUFBTSxHQUFHLEdBQUcscUJBQXFCLENBQUM7SUFDbEMsTUFBTSxFQUFFLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLE1B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